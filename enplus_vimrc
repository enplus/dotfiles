"Settings Color Scheme - /usr/share/vim/colors/
syntax enable

let mapleader = "\<Space>"

set exrc

syntax on
filetype plugin indent on

" Default Settings: /*{{{*/
	set number					" nu
	set numberwidth=5			" nuw - 줄 넘버 표시 너비 설정(set nuw)
	set autoindent				" ai
	set smartindent				" si
	set cindent					" ci - c style index
	set history=100				" 명령어에 대한 히스토리를 100개까지
	set tabstop=4				" tab을 4칸으로
	set softtabstop=4			" sts - tab >> space no ???
	set shiftwidth=4			" sw - shift를 4칸으로 ( >, >>, <, << 등의 명령어)
	set noexpandtab				" noet - Tab의 
	set	showcmd
	set showmatch				" 매칭되는 괄호를 보여줌
	set wildmenu				" wmnu - 명령어 tab으로 완성시 리스트를 보여준다(help 등)

	set hlsearch				" 검색시 하이라이트(색상 강조)
	set incsearch				" 점진적 검색

	set nocompatible			" nocp - 화살표로 이동 가능

	set fileencodings=ucs-bom,utf-8,euc-kr,cp949	" fencs


	set backspace=""			" Vi compatible
	set sol						" 이동시 줄 시작으로 자동 이동
	set nowrapscan				" 검색시 끝에서 처음으로 돌아가지 않음
	set foldmethod=marker		" fdm - manual, indent, expr, marker, syntax, diff
	set foldmarker={{{,}}}		" fmr -
	set nofoldenable			" fold open(default)
"	set colorcolumn=100		" 세로 줄 세팅 - 구분용
	hi ColorColumn ctermbg=darkgray
"	set ruler					" 상태표시줄에서 커서의 위치 표시 -Airline 대체
"	set bs=indent,eol,start		" backspace로 이전줄 편집 가능
"	set ignorecase				" For search - Upper/Lower case ignore

" /*}}}*/

" Install pathogen
execute pathogen#infect()

"au BufEnter *.cpp colorscheme vividchalk
"au BufEnter * colorscheme gruvbox
au BufEnter *.py,*.cpp colorscheme gruvbox

au BufNewFile,BufRead *.pc,*.sc,*.c set filetype=c omnifunc= 
au BufNewFile,BufRead *.cpp setf cpp
au BufNewFile,BufRead tags.* set filetype=tags
au BufNewFile,BufRead make.*.config setf make
au BufNewFile,BufRead make.*.depend setf make
au BufNewFile,BufRead,BufEnter *.cpp,*.hpp set omnifunc=omni#cpp#complete#Main
"au BufEnter * let &titlestring = hostname() . "@" . expand("%:f")
"타이틀 명 - Vim
au BufEnter * let &titlestring = strpart( hostname(), 0, match( hostname(), '\.' ) ) . "<" . $USER . "> " . fnamemodify( getcwd(), ':~' ) . " (" . fnamemodify( expand( "%:p" ), ":.") . ")"
set title

"au FileType php setl ofu=phpcomplete#CompletePHP
"au FileType ruby,eruby setl ofu=rubycomplete#Complete
"au FileType html,xhtml setl ofu=htmlcomplete#CompleteTags
"au FileType c setl ofu=ccomplete#CompleteCpp
"au FileType cpp setl ofu=cppcomplete#CompleteCpp
"au FileType css setl ofu=csscomplete#CompleteCSS

" 마지막 편집 위치 기억"{{{
au BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "norm g`\"" |
\ endif"}}}

set laststatus=2 " AirLine 외 기타 설정용
"set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\

"set nowrap
"set listchars=extends:>,precedes:<

set cursorline
"hi Normal ctermbg=NONE		"Black Backgroud (System Color)
"set cursorcolumn

" map Function :
	"   map <C-l> :TlistAddFiles ~/include/TbdatAll.h ~/include/quote_rq.h<CR>:Tlist<CR><C-w>w
	map <F1> :exec("help ".expand("<cword>"))<CR><C-W>_
	map <F2> :TlistToggle<CR>
	map <F3> :NERDTreeToggle<CR>
"	map <F4> zN
"	map <F5> :!gcc % -o %.out<CR>:!
"	map <S-F5> zN
	map <F6> ^Ww
	map <F7> O
	map <F8> [i
"	map <S-F9> :!echo 'Compile - g++ % -o %<.out ' && echo && g++ % -o %<.out && ./%<.out <CR>
	nmap <F9> :SingleCompileRun <CR>
	map <F10> ''
	map <F11> ^]
	map <F12> ^T

"	set winminheight=0			" wmh
	set winminwidth=1			" wmw
	map <C-X> :q <CR>
"	map <C-H> :Tlist<CR><C-w>w
"	map <C-J> <C-w>j<C-w>_
"	map <C-K> <C-w>k<C-w>_
	map <C-]> <C-w>g<C-]><C-w>_
	"map <C-]> :sp <CR>:exec("tag ".expand("<cword>"))<CR><C-W>k<C-W>_
	"
	"" ESC키를 누르면 한글 모드가 해제 "
	" 입력모드에서 이전 언어 설정 모드 유지 "
" inoremap <ESC> <ESC> :set imdisable<CR>
" nnoremap i :set noimd<CR>i
" nnoremap I :set noimd<CR>I
" nnoremap a :set noimd<CR>a
" nnoremap A :set noimd<CR>A
" nnoremap o :set noimd<CR>o
" nnoremap O :set noimd<CR>O    

"  map Function

" make tab in normal mode indent code
	nmap <tab> >>
	nmap <s-tab> <<
	"nmap <s-tab> ^i<bs><esc>
" markdown preview
	nmap <leader>p :InstantMarkdownPreview<CR>

"FoldingBracket map  [{v]}zf

" Set tags: {{{
	" 각 폴더별 분류에 따른 tags 세팅
	" 'if문의 =~' 의미는 포함 여부
	set tags=./tags,tags
	set tags+=$TAGS_DIR/tags.BCM			"bcm
	if getcwd() =~ $IMDB_HOME				"imdb
" set tags+=$TAGS_DIR/tags.IMDB,tags
		set tags+=$IMDB_HOME/include/tags
		set tags+=$IMDB_HOME/src/tags
	elseif getcwd() =~ $BOS_HOME			"bos
		set tags+=$TAGS_DIR/tags.BOS
	elseif getcwd() =~ $INFOWAY_HOME		"infoway
		set tags+=$TAGS_DIR/tags.INFOWAY
	elseif getcwd() =~ $MFP_HOME			"mfp
		set tags+=$TAGS_DIR/tags.MFP
	elseif getcwd() =~ $WQIS_HOME			"wqis
		set tags+=$TAGS_DIR/tags.WQIS
	elseif getcwd() =~ $ORD_HOME			"ord
		set tags+=$ORD_HOME/include/tags
		set tags+=$ORD_HOME/src/tags
"		set tags+=$ORD_HOME/lib/tags
	elseif getcwd() =~ $GFX_HOME			"gfx
		set tags+=$GFX_HOME/src/tags
	elseif getcwd() =~ $ALICE_HOME			"alice
		set tags+=$ALICE_HOME/src/tags.ALICE
	endif

"set complete
"set tagbsearch
" }}}

" Set taglist:/*{{{*/
	let g:Tlist_Display_Tag_Scope =0
	let g:Tlist_Display_Prototype =0
	let g:Tlist_Sort_Type = "type"    "order, name
"	let g:Tlist_Use_Right_Window = 0
	let g:Tlist_WinWidth = 25 
	let g:Tlist_Close_On_Select  = 1
	let g:Tlist_Auto_Open=0
	let g:Tlist_Use_Split_Window = 1
"	com TT NERDTree | TlistToggle

	" NERDTree.vim 에서 직접 수정 if &encoding == 'utf-8' endfi 
	"	let NERDTreeDirArrows = 0
	"	i
	"if &encoding != 'utf-8' 
		"let g:NERDTreeDirArrows=0
		"let g:NERDTreeDirArrowExpandable="+"
		"let g:NERDTreeDirArrowCollapsible="|"
	"endif
 
"/*}}}*/
"
" Set NerdTree:/*{{{*/
	let	NERDTreeDirArrows=0
"/*}}}*/

" 뭔지 아직 파악안됨
"augroup vimrc_autocmds
"	autocmd BufEnter * highlight OverLength ctermbg=darkgrey guibg=#592929
"	autocmd BufEnter * match OverLength /\%81v.*/
"	화면 끝의 불필요한 공백 표시여부
"	autocmd BufEnter * highlight UnwantedSpaces ctermbg=darkgrey guibg=#darkgrey
"	autocmd BufEnter * match UnwantedSpaces /\s\+$/
"augroup END 

augroup vimrc_autocmds
    autocmd!
    "hi characters past column 120
    autocmd FileType python highlight Excess ctermbg=DarkGrey guibg=Black
    autocmd FileType python match Excess /\%120v.*/
    autocmd FileType python set nowrap
augroup END

" 사용여부 고민 "let g:miniBufExplMapWindowNavVim = 1  " Ctrl+[hjkl] 로 윈도우간 이동 가능
" 사용여부 고민 "let g:miniBufExplMapWindowNavArrows = 1 " Ctrl+화살표로 윈도우간 이동 가능
" 사용여부 고민 "let g:miniBufExplMapCTabSwitchBufs = 1 " Ctrl-Tab, Ctrl-Shift-Tab으로 버퍼간 스위칭... !! 짱이예욤!!
" 사용여부 고민 "let g:miniBufExplModSelTarget = 1  " Ctrl-Tab로 버퍼간 스위칭 할 때 방향지정

let g:molokai_original = 1
let g:rehash256 = 1

if(filereadable($HOME . "/.vimrc_plugin"))
	    :so $HOME/.vimrc_plugin
endif
" AutoComplPop - TabFunction"{{{
"-----------------------------------------------------------------------"
"
let g:acp_autoselectFirstCompletion = 0
"function! InsertTabWrapper()
"	let col = col('.')-1
"	if !col||getline('.')[col-1]!~'\k'
"		return "\<Tab>"
"	else 
"		if pumvisible()
"			return "\<C-N>"
"		else
"			return "\<C-N>\<C-P>"
"		end
"	endif
"endfunction
"inoremap <Tab> <C-r>=InsertTabWrapper()<cr>

"highlight Pmenu ctermbg=blue
"highlight PmenuSel ctermbg=yellow ctermbg=black
"highlight PmenuSbar ctermbg=blue
"function! InsertTabWrapper()
"	let col = col('.') - 1
"	if !col || getline('.')[col - 1] !~ '\k'
"		return "\<Tab>"
"	else
"		return "\<C-p>"
"	endif
"endfunction
"
"inoremap <Tab> <C-r>=InsertTabWrapper()<cr>
"inoremap <S-Tab> <C-n>

"function! CleverTab()
"  if pumvisible()
"	return "\<C-N>"
"  endif
"  if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
"	return "\<Tab>"
"  elseif exists('&omnifunc') && &omnifunc != ''
"	return "\<C-X>\<C-O>"
"  else
"	return "\<C-N>"
"  endif
"endfunction
"inoremap <Tab> <C-R>=CleverTab()<CR>

	"inoremap <S-Tab> <C-n>
" Don't preselect the first item.  Use the same key to select and to browse
"}}}
"
"

" function! s:GotoWinline(w_l)
"   normal! H
"   while winline() < a:w_l
" 	normal! j
"   endwhile
"   " todo: beware of cases where the window is too little
" endfunction
"
"
function! SuperCleverTab()
	if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
		return "<leader>"
	else
	if &omnifunc != ''
	return "\\"
	elseif &dictionary != ''
	return "\"
	else
	return "\"
	endif
	endif
endfunction

"inoremap <Tab> <C-R>=SuperCleverTab()<CR>

function! ToggleNerdtreeTagbar()

    " check if NERDTree and Tagbar are opened
    let NERDTree_close = (bufwinnr('NERD_tree') == -1) 
    let Tagbar_close   = (bufwinnr('__Tagbar__') == -1) 

    TlistToggle
    NERDTreeToggle

    if NERDTree_close && Tagbar_close
        wincmd K
        wincmd b
        wincmd L
        wincmd h
        exe 'vertical resize 30'
    endif

endfunction
nmap <C-e> :call ToggleNerdtreeTagbar()<CR>

"For Gvim Options
" 그냥 gvim -u .gvimrc로 별도 읽어오기
"if &term == "builtin_gui"
"	colorscheme gruvbox
"	set background=light
"else
"	set background=dark
"endif

if &term != "builtin_gui"
"	let g:ycm_global_ycm_extra_conf = '.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
	"YouCompleteMe and UltiSnips
	let g:ycm_key_list_select_completion=[]
	let g:ycm_key_list_previous_completion=[]
endif

setlocal comments-=://

set t_Co=256

if &term =~ ("screen")
	if &term =~ ("256")
		set background=dark
		colorscheme gruvbox
	else
		colorscheme BusyBee
	endif

"	set background=light
"	colorscheme solarized
"	colorscheme BusyBee

	"hi CursorLine   cterm=NONE ctermbg=gray ctermfg=NONE guibg=darkred guifg=white
	"hi CursorColumn cterm=NONE ctermbg=gray ctermfg=NONE guibg=darkred guifg=white
	nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>
elseif &term == ("xterm")
	set background=dark
	colorscheme gruvbox
elseif &term == ("builtin_gui")
	 Remove menu bar
	set guioptions-=m

	" Remove toolbar
	set guioptions-=T

	set guioptions-=L			"Left Scrollbar
	set guioptions-=r			"Right Scrollbar

	colorscheme molokai
	set background=light

	let g:EclimCompletionMethod="omnifunc"
	let g:loaded_nerd_tree=1
	"let g:netrw_liststyle=3
	set guifont=Bitstream\ Vera\ Sans\ Mono\ 12
endif

let g:rainbow_active=1

let g:indentLine_char = '┆'
let g:indentLine_color_term = 'lightblue'
let g:indentLine_color_gui = 'lightblue'

"For suan/instant-markdown
let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0

" Syntastic Recommend Setttings"{{{
"-----------------------------------------------------------------------"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 3
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
"let g:syntastic_error_symbol = "✗" "let g:syntastic_warning_symbol = "⚠"
let g:syntastic_python_python_exec = '/home/deplus/compile/python'

" Syntastic checker options
" " YCM config
" "let g:ycm_add_preview_to_completeopt = 0
" "set completeopt-=preview
" "let g:syntastic_echo_current_error=1
let g:ycm_semantic_triggers =  {
  \   'c' : ['->', '.'],
  \   'objc' : ['->', '.'],
  \   'cpp,objcpp' : ['->', '.', '::'],
  \   'perl' : ['->'],
  \   'cs,java,javascript,d,vim,ruby,python,perl6,scala,vb,elixir,go' : ['.'],
  \   'lua' : ['.', ':'],
  \   'erlang' : [':'],
  \ }
set updatetime=1000
"}}}

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" Display tabs at the beginning of a line in Python mode as bad.

au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" " Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile  *.py,*.pyw,*.rb,*.c,*.h,*.pl,*.pm,*.php match BadWhitespace /\s\+$/

"turn on tabs if that's the file format
function Settabs()
	if len(filter(getbufline(winbufnr(0), 1, "$"), 'v:val =~ "^\\t"')) > len(filter(getbufline(winbufnr(0), 1, "$"), 'v:val =~ "^ "'))
	  set noet ts=4 sw=4
  endif
endfunction
autocmd BufReadPost * call Settabs()
